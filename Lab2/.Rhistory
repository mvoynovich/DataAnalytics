install.packages("languageserver")
q()
install.packages('adklakedata')
import 'adklakedata'
libraru(adklakedata)
library(adklakedata)
library(adklakedata)
info <- adk_data("meta")
View(info)
crustacean <- adk_data("crustacean")
View(crustacean)
View(crustacean)
chem <- adk_data("chem")
nutrients <- adk_data("nutrient")
View(chem)
View(nutrients)
View(chem)
View(nutrients)
View(info)
View(chem)
library(adklakedata)
library(dplyr)
library(ggplot2)
crustacean <- adk_data("crustacean")
info <- adk_data("meta")
chem <- adk_data("chem")
nutrients <- adk_data("nutrient")
#for fun, creates a new dataset with only annual temp and year
chart<-crustacean[,c("lake.name", "mgWW.l")]
chart <- na.omit(chart)
#Sort for every lake
chart_mean<-chart%>%group_by(lake.name)%>%
summarise(mgWW.l=mean(mgWW.l))
chart_mean <- chart_mean[order(chart$mgWW.l),]
View(chart)
View(chart_mean)
library(adklakedata)
library(dplyr)
library(ggplot2)
crustacean <- adk_data("crustacean")
info <- adk_data("meta")
chem <- adk_data("chem")
nutrients <- adk_data("nutrient")
#for fun, creates a new dataset with only annual temp and year
chart<-crustacean[,c("lake.name", "mgWW.l")]
chart <- na.omit(chart)
#Sort for every lake
chart_mean<-chart%>%group_by(lake.name)%>%
summarise(mgWW.l=mean(mgWW.l))
View(chart_mean)
View(chart_mean)
View(chart)
View(chart_mean)
View(chart)
View(chart_mean)
View(chart_mean)
View(crustacean)
library(adklakedata)
library(dplyr)
library(ggplot2)
crustacean <- adk_data("crustacean")
info <- adk_data("meta")
chem <- adk_data("chem")
nutrients <- adk_data("nutrient")
#for fun, creates crustacean chart
chart<-crustacean[,c("lake.name", "mgWW.l")]
chart <- na.omit(chart)
#Sort for every lake
chart_mean<-chart%>%group_by(lake.name, year)%>%
summarise(mgWW.l=mean(mgWW.l))
#for fun, creates crustacean chart
chart<-crustacean[,c("lake.name", "mgWW.l", "year")]
#Sort for every lake
chart_mean<-chart%>%group_by(lake.name, year)%>%
summarise(mgWW.l=mean(mgWW.l))
View(chart_mean)
#Sort for every lake
chart_mean<-chart%>%group_by(year, lake.name)%>%
summarise(mgWW.l=mean(mgWW.l))
View(chart_mean)
#for fun, creates crustacean chart
chart<-crustacean[,c("mgWW.l", "year")]
chart <- na.omit(chart)
#Sort for every lake
chart_mean<-chart%>%group_by(year)%>%
summarise(mgWW.l=mean(mgWW.l))
View(chart_mean)
View(chem)
#for fun, creates crustacean chart
chart<-chem[,c("pH", "year")]
chart <- na.omit(chart)
#Sort for every lake
chart_mean<-chart%>%group_by(year)%>%
summarise(mgWW.l=mean(mgWW.l))
#Sort for every lake
chart_mean<-chart%>%group_by(year)%>%
summarise(mgWW.l=mean(pH))
View(chart_mean)
#Sort for every lake
chart_mean<-chart%>%group_by(year)%>%
summarise(pH=mean(pH))
#for fun, creates crustacean chart
chart<-chem[,c("Calcium", "year")]
chart <- na.omit(chart)
#Sort for every lake
chart_mean<-chart%>%group_by(year)%>%
summarise(Calcium=mean(Calcium))
View(chart_mean)
#for fun, creates crustacean chart
chart<-nutrients[,c("Fe", "year")]
chart <- na.omit(chart)
#Sort for every lake
chart_mean<-chart%>%group_by(year)%>%
summarise(Fe=mean(Fe))
View(chart_mean)
View(chem)
View(chem)
#for fun, creates crustacean chart
chart<-nutrients[,c("Fe", "year")]
chart <- na.omit(chart)
#Sort for every lake
chart_mean<-chart%>%group_by(year)%>%
summarise(Fe=mean(Fe))
View(chart_mean)
View(chem)
View(chem)
crustacean <- adk_data("crustacean")
info <- adk_data("meta")
chem <- adk_data("chem")
nutrients <- adk_data("nutrient")
#for fun, creates crustacean chart
chart<-chem[,c("Calcium", "year")]
chart <- na.omit(chart)
#Sort for every lake
chart_mean<-chart%>%group_by(year)%>%
summarise(Calcium=mean(Calcium))
ggplot(data = chart_mean, aes(x=Year,y=round)) + geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "blue", linetype = "dashed")+
theme_classic() +
ylab("Crustacean Density (mg ww /L)") +
xlab("Year") + ggtitle("Rotifer Population Density (mg/L) from 1994 - 2012") +
stat_regline_equation(label.x=2006, label.y=0.05) +
stat_cor(aes(label=..rr.label..), label.x=2006, label.y=0.04)
#for fun, creates crustacean chart
chart<-chem[,c("Calcium", "year", "lake.name")]
View(chart)
#Sort for every lake
chart_mean<-chart%>%group_by(year, lake.name)%>%
summarise(Calcium=mean(Calcium))
View(chart_mean)
#Sort for every lake
chart_mean<-chart%>%group_by(year)%>%
summarise(Calcium=mean(Calcium))
View(chart_mean)
#Sort for every lake
chart_mean<-chart%>%group_by(year, lake.name)%>%
summarise(Calcium=mean(Calcium))
View(chart_mean)
View(chem)
# QQ against normal distrib
qqnorm(PAR); qqline(PAR)
library(readr)
epi_results_2024_pop_gdp_v2 <- read_csv("\"C:\\Users\\matec\\DataAnalytics\\Lab2\\epi_results_2024_pop_gdp_v2.csv\"")
library(ggplot2)
### set working directory
setwd("C:/Users/matec/DataAnalytics/Lab2")
library(readr)
epi_results_2024_pop_gdp_v2 <- read_csv("C:\\Users\\matec\\DataAnalytics\\Lab2\\epi_results_2024_pop_gdp_v2.csv")
View(epi_results_2024_pop_gdp_v2)
library(readr)
dataset <- read_csv(NULL)
library(readr)
NY_House_Dataset <- read_csv("C:\\Users\\matec\\DataAnalytics\\Lab2\\NY-House-Dataset.csv")
View(NY_House_Dataset)
### read in data
epi.data <- read.csv("epi_results_2024_pop_gdp_v2.csv", header=TRUE)
View(epi.data)
EPI.new <- epi.data$EPI.new
## NA values
na.indices <- is.na(EPI.new)
## drop NAs
Epi.new.compl <- EPI.new[!na.indices]
## convert to data frame and add country
country <- epi.data$country
Epi.new.compl <- data.frame(Country = country[!na.indices], EPI = EPI.new[!na.indices])
## summary stats
summary(EPI.new)
fivenum(EPI.new,na.rm=TRUE)
## histograms
hist(EPI.new)
fivenum(EPI.new,na.rm=TRUE)
## histograms
hist(EPI.new)
hist(EPI.new, seq(20., 80., 2.0), prob=TRUE)
rug(EPI.new)
lines(density(EPI.new,na.rm=TRUE,bw=1))
lines(density(EPI.new,na.rm=TRUE,bw="SJ"))
### Comparing distributions of 2 variables
EPI.old <- epi.data$EPI.old
boxplot(EPI.old, EPI.new, names=c("EPI.old","EPI.new"))
qqplot(EPI.new,EPI.old)
#### GDP vs. EPI ####
gdp <- epi.data$gdp
ggplot(epi.data, aes(x = gdp, y = EPI.new, colour = region)) +
geom_point()
ggplot(epi.data, aes(x = gdp, y = EPI.new, colour = region)) +
geom_point()
## created linear model of EPI.new ~ gdp
lin.mod0 <- lm(EPI.new~gdp,epi.data)
summary(lin.mod0)
ggplot(epi.data, aes(x = gdp, y = EPI.new)) +
geom_point() +
stat_smooth(method = "lm")
ggplot(lin.mod0, aes(x = .fitted, y = .resid)) +
geom_point() +
geom_hline(yintercept = 0) +
labs(title='Residual vs. Fitted Values Plot', x='Fitted Values', y='Residuals')
## another lm using log 10 gdp
epi.data$log_gdp <- log10(gdp)
ggplot(epi.data, aes(x = log_gdp, y = EPI.new, colour = region)) +
geom_point()
lin.mod1 <- lm(log_gdp~EPI.new,epi.data)
summary(lin.mod1)
ggplot(epi.data, aes(x = log_gdp, y = EPI.new)) +
geom_point() +
stat_smooth(method = "lm")
ggplot(lin.mod1, aes(x = .fitted, y = .resid)) +
geom_point() +
geom_hline(yintercept = 0) +
labs(title='Residual vs. Fitted Values Plot', x='Fitted Values', y='Residuals')
### subset by regions
summary(epi.data$region)
##convert region from strings to factors
epi.data$region <- as.factor(epi.data$region)
summary(epi.data$region)
epi.data.subset <- epi.data[! epi.data$region %in% c("Eastern Europe","Former Soviet States","Latin America & Caribbean"),]
ggplot(epi.data.subset, aes(x = log_gdp, y = EPI.new, colour = region, label=country)) +
geom_point() + geom_text(hjust=0, vjust=0)
lin.mod2 <- lm(log_gdp~EPI.new,epi.data.subset)
summary(lin.mod2)
ggplot(epi.data.subset, aes(x = log_gdp, y = EPI.new)) +
geom_point() +
stat_smooth(method = "lm")
ggplot(lin.mod2, aes(x = .fitted, y = .resid)) +
geom_point() +
geom_hline(yintercept = 0) +
labs(title='Residual vs. Fitted Values Plot', x='Fitted Values', y='Residuals')
# Start cleaning the data
Clean_NY_House <- na.omit(NY_House_Dataset)
View(Epi.new.compl)
# Start cleaning the data
# Remove any null values
Clean_NY_House <- na.omit(NY_House_Dataset)
# Still 4801 variables so dataset seems to have been maintained well
NY_House_DF <- data.frame(Price = Clean_NY_House$PRICE, PropertySqFt = Clean_NY_House$PROPERTYSQFT, Beds = Clean_NY_House$BEDS, Bath = Clean_NY_House$BATH)
View(NY_House_Dataset)
View(NY_House_DF)
# Start cleaning the data
# Remove any null values
Clean_NY_House <- na.omit(NY_House_Dataset)
# Still 4801 variables so dataset seems to have been maintained well
NY_House_DF <- data.frame(Price = Clean_NY_House$PRICE, PropertySqFt = Clean_NY_House$PROPERTYSQFT, Beds = Clean_NY_House$BEDS, Bath = Clean_NY_House$BATH)
NY_House_DF$Bath <- round(NY_House_DF$Bath)
View(NY_House_DF)
# Start creating models
house_lin_model0 <- lm(NY_House_DF$Price~, NY_House_DF)
# Start creating models
house_lin_model0 <- lm(Price~, NY_House_DF)
# Start creating models
house_lin_model0 <- lm(Price~., NY_House_DF)
summary(house_lin_model0)
ggplot(NY_House_DF, aes(x = PropertySqFt, y = Price)) +
geom_point() +
stat_smooth(method = "lm")
# Outliers make it really hard. Repeat with their removal
meanVal <- mean(NY_House_DF$Price, na.rm = TRUE)
sdVal <- sd(NY_House_DF$Price, na.rm = TRUE)
NY_House_DF <- NY_House_DF[abs(NY_House_DF$Price - meanVal) <= 3*sdVal, ]
summary(house_lin_model0)
ggplot(NY_House_DF, aes(x = PropertySqFt, y = Price)) +
geom_point() +
stat_smooth(method = "lm")
# Create model with log price
NY_House_DF$Price <- log10(NY_House_DF$Price)
View(NY_House_DF)
# Start cleaning the data
# Remove any null values
Clean_NY_House <- na.omit(NY_House_Dataset)
NY_House_DF <- data.frame(Price = Clean_NY_House$PRICE, PropertySqFt = Clean_NY_House$PROPERTYSQFT, Beds = Clean_NY_House$BEDS, Bath = Clean_NY_House$BATH)
NY_House_DF$Bath <- round(NY_House_DF$Bath)
# Start creating models
house_lin_model0 <- lm(Price~., NY_House_DF)
summary(house_lin_model0)
ggplot(NY_House_DF, aes(x = PropertySqFt, y = Price)) +
geom_point() +
stat_smooth(method = "lm")
# Outliers make it really hard. Repeat with their removal using z-score/standard deviation
meanVal <- mean(NY_House_DF$Price, na.rm = TRUE)
sdVal <- sd(NY_House_DF$Price, na.rm = TRUE)
NY_House_DF <- NY_House_DF[abs(NY_House_DF$Price - meanVal) <= 3*sdVal, ]
# Repeat creation of first model
house_lin_model0 <- lm(Price~., NY_House_DF)
summary(house_lin_model0)
ggplot(NY_House_DF, aes(x = PropertySqFt, y = Price)) +
geom_point() +
stat_smooth(method = "lm")
# Create model with log price
NY_House_DF$LogPrice <- log10(NY_House_DF$Price)
# Repeat Linear Model Now
house_lin_model0 <- lm(Price~Bath + Bed + LogPrice, NY_House_DF)
View(Epi.new.compl)
# Repeat Linear Model Now
house_lin_model0 <- lm(Price~Bath + Beds + LogPrice, NY_House_DF)
summary(house_lin_model0)
ggplot(NY_House_DF, aes(x = PropertySqFt, y = Price)) +
geom_point() +
stat_smooth(method = "lm")
# Repeat Linear Model Now
house_lin_model0 <- lm(LogPrice~Bath + Beds + PropertySqFt, NY_House_DF)
summary(house_lin_model0)
ggplot(NY_House_DF, aes(x = Bath, y = LogPrice)) +
geom_point() +
stat_smooth(method = "lm")
ggplot(NY_House_DF, aes(x = Bath, y = PropertySqFt)) +
geom_point() +
stat_smooth(method = "lm")
ggplot(NY_House_DF, aes(x = Bath, y = Beds)) +
geom_point() +
stat_smooth(method = "lm")
ggplot(NY_House_DF, aes(x = Bath, y = Bath)) +
geom_point() +
stat_smooth(method = "lm")
ggplot(NY_House_DF, aes(x = Bath, y = LogPrice)) +
geom_point() +
stat_smooth(method = "lm")
ggplot(NY_House_DF, aes(x = Bed, y = LogPrice)) +
geom_point() +
stat_smooth(method = "lm")
ggplot(NY_House_DF, aes(x = Beds, y = LogPrice)) +
geom_point() +
stat_smooth(method = "lm")
ggplot(NY_House_DF, aes(x = PropertySqFt, y = LogPrice)) +
geom_point() +
stat_smooth(method = "lm")
ggplot(NY_House_DF, aes(x = Bath, y = LogPrice)) +
geom_point() +
stat_smooth(method = "lm")
# Start cleaning the data
# Remove any null values
Clean_NY_House <- na.omit(NY_House_Dataset)
NY_House_DF <- data.frame(Price = Clean_NY_House$PRICE, PropertySqFt = Clean_NY_House$PROPERTYSQFT, Beds = Clean_NY_House$BEDS, Bath = Clean_NY_House$BATH)
NY_House_DF$Bath <- round(NY_House_DF$Bath)
# Start creating models
house_lin_model0 <- lm(Price~., NY_House_DF)
summary(house_lin_model0)
ggplot(NY_House_DF, aes(x = PropertySqFt, y = Price)) +
geom_point() +
stat_smooth(method = "lm")
# Outliers make it really hard. Repeat with their removal using z-score/standard deviation
meanVal <- mean(NY_House_DF$Price, na.rm = TRUE)
sdVal <- sd(NY_House_DF$Price, na.rm = TRUE)
NY_House_DF <- NY_House_DF[abs(NY_House_DF$Price - meanVal) <= 3*sdVal, ]
# Repeat creation of first model
house_lin_model0 <- lm(Price~., NY_House_DF)
summary(house_lin_model0)
ggplot(NY_House_DF, aes(x = PropertySqFt, y = Price)) +
geom_point() +
stat_smooth(method = "lm")
house_lin_model2 <- lm(Price~Bath + PropertySqFt, NY_House_DF)
summary(house_lin_model2)
ggplot(NY_House_DF, aes(x = PropertySqFt, y = LogPrice)) +
geom_point() +
stat_smooth(method = "lm")
ggplot(NY_House_DF, aes(x = PropertySqFt, y = Price)) +
geom_point() +
stat_smooth(method = "lm")
# Start cleaning the data
# Remove any null values
Clean_NY_House <- na.omit(NY_House_Dataset)
NY_House_DF <- data.frame(Price = Clean_NY_House$PRICE, PropertySqFt = Clean_NY_House$PROPERTYSQFT, Beds = Clean_NY_House$BEDS, Bath = Clean_NY_House$BATH)
NY_House_DF$Bath <- round(NY_House_DF$Bath)
# Start creating models
house_lin_model0 <- lm(Price~., NY_House_DF)
summary(house_lin_model0)
ggplot(NY_House_DF, aes(x = PropertySqFt, y = Price)) +
geom_point() +
stat_smooth(method = "lm")
# Outliers make it really hard. Repeat with their removal using z-score/standard deviation
meanVal <- mean(NY_House_DF$Price, na.rm = TRUE)
sdVal <- sd(NY_House_DF$Price, na.rm = TRUE)
NY_House_DF <- NY_House_DF[abs(NY_House_DF$Price - meanVal) <= 3*sdVal, ]
# Repeat creation of first model
house_lin_model0 <- lm(Price~., NY_House_DF)
summary(house_lin_model0)
ggplot(NY_House_DF, aes(x = PropertySqFt, y = Price)) +
geom_point() +
stat_smooth(method = "lm")
View(NY_House_DF)
house_lin_model2 <- lm(Price~Bath + PropertySqFt, NY_House_DF)
summary(house_lin_model2)
# Repeat Linear Model Now
house_lin_model1 <- lm(LogPrice~Bath + Beds + PropertySqFt, NY_House_DF)
summary(house_lin_model1)
ggplot(NY_House_DF, aes(x = Bath, y = LogPrice)) +
geom_point() +
stat_smooth(method = "lm")
# Start cleaning the data
# Remove any null values
Clean_NY_House <- na.omit(NY_House_Dataset)
NY_House_DF <- data.frame(Price = Clean_NY_House$PRICE, PropertySqFt = Clean_NY_House$PROPERTYSQFT, Beds = Clean_NY_House$BEDS, Bath = Clean_NY_House$BATH)
NY_House_DF$Bath <- round(NY_House_DF$Bath)
# Start creating models
house_lin_model0 <- lm(Price~., NY_House_DF)
summary(house_lin_model0)
ggplot(NY_House_DF, aes(x = PropertySqFt, y = Price)) +
geom_point() +
stat_smooth(method = "lm")
# Outliers make it really hard. Repeat with their removal using z-score/standard deviation
meanVal <- mean(NY_House_DF$Price, na.rm = TRUE)
sdVal <- sd(NY_House_DF$Price, na.rm = TRUE)
NY_House_DF <- NY_House_DF[abs(NY_House_DF$Price - meanVal) <= 3*sdVal, ]
# Repeat creation of first model
house_lin_model0 <- lm(Price~., NY_House_DF)
summary(house_lin_model0)
ggplot(NY_House_DF, aes(x = PropertySqFt, y = Price)) +
geom_point() +
stat_smooth(method = "lm")
# Create model with log price
NY_House_DF$LogPrice <- log10(NY_House_DF$Price)
# Repeat Linear Model Now
house_lin_model1 <- lm(LogPrice~Bath + Beds + PropertySqFt, NY_House_DF)
summary(house_lin_model1)
ggplot(NY_House_DF, aes(x = Bath, y = LogPrice)) +
geom_point() +
stat_smooth(method = "lm")
house_lin_model2 <- lm(Price~Bath, NY_House_DF)
summary(house_lin_model2)
ggplot(NY_House_DF, aes(x = PropertySqFt, y = Price)) +
geom_point() +
stat_smooth(method = "lm")
house_lin_model2 <- lm(Price~PropertySqFt, NY_House_DF)
summary(house_lin_model2)
