install.packages("languageserver")
q()
install.packages('adklakedata')
import 'adklakedata'
libraru(adklakedata)
library(adklakedata)
library(adklakedata)
info <- adk_data("meta")
View(info)
crustacean <- adk_data("crustacean")
View(crustacean)
View(crustacean)
chem <- adk_data("chem")
nutrients <- adk_data("nutrient")
View(chem)
View(nutrients)
View(chem)
View(nutrients)
View(info)
View(chem)
library(adklakedata)
library(dplyr)
library(ggplot2)
crustacean <- adk_data("crustacean")
info <- adk_data("meta")
chem <- adk_data("chem")
nutrients <- adk_data("nutrient")
#for fun, creates a new dataset with only annual temp and year
chart<-crustacean[,c("lake.name", "mgWW.l")]
chart <- na.omit(chart)
#Sort for every lake
chart_mean<-chart%>%group_by(lake.name)%>%
summarise(mgWW.l=mean(mgWW.l))
chart_mean <- chart_mean[order(chart$mgWW.l),]
View(chart)
View(chart_mean)
library(adklakedata)
library(dplyr)
library(ggplot2)
crustacean <- adk_data("crustacean")
info <- adk_data("meta")
chem <- adk_data("chem")
nutrients <- adk_data("nutrient")
#for fun, creates a new dataset with only annual temp and year
chart<-crustacean[,c("lake.name", "mgWW.l")]
chart <- na.omit(chart)
#Sort for every lake
chart_mean<-chart%>%group_by(lake.name)%>%
summarise(mgWW.l=mean(mgWW.l))
View(chart_mean)
View(chart_mean)
View(chart)
View(chart_mean)
View(chart)
View(chart_mean)
View(chart_mean)
View(crustacean)
library(adklakedata)
library(dplyr)
library(ggplot2)
crustacean <- adk_data("crustacean")
info <- adk_data("meta")
chem <- adk_data("chem")
nutrients <- adk_data("nutrient")
#for fun, creates crustacean chart
chart<-crustacean[,c("lake.name", "mgWW.l")]
chart <- na.omit(chart)
#Sort for every lake
chart_mean<-chart%>%group_by(lake.name, year)%>%
summarise(mgWW.l=mean(mgWW.l))
#for fun, creates crustacean chart
chart<-crustacean[,c("lake.name", "mgWW.l", "year")]
#Sort for every lake
chart_mean<-chart%>%group_by(lake.name, year)%>%
summarise(mgWW.l=mean(mgWW.l))
View(chart_mean)
#Sort for every lake
chart_mean<-chart%>%group_by(year, lake.name)%>%
summarise(mgWW.l=mean(mgWW.l))
View(chart_mean)
#for fun, creates crustacean chart
chart<-crustacean[,c("mgWW.l", "year")]
chart <- na.omit(chart)
#Sort for every lake
chart_mean<-chart%>%group_by(year)%>%
summarise(mgWW.l=mean(mgWW.l))
View(chart_mean)
View(chem)
#for fun, creates crustacean chart
chart<-chem[,c("pH", "year")]
chart <- na.omit(chart)
#Sort for every lake
chart_mean<-chart%>%group_by(year)%>%
summarise(mgWW.l=mean(mgWW.l))
#Sort for every lake
chart_mean<-chart%>%group_by(year)%>%
summarise(mgWW.l=mean(pH))
View(chart_mean)
#Sort for every lake
chart_mean<-chart%>%group_by(year)%>%
summarise(pH=mean(pH))
#for fun, creates crustacean chart
chart<-chem[,c("Calcium", "year")]
chart <- na.omit(chart)
#Sort for every lake
chart_mean<-chart%>%group_by(year)%>%
summarise(Calcium=mean(Calcium))
View(chart_mean)
#for fun, creates crustacean chart
chart<-nutrients[,c("Fe", "year")]
chart <- na.omit(chart)
#Sort for every lake
chart_mean<-chart%>%group_by(year)%>%
summarise(Fe=mean(Fe))
View(chart_mean)
View(chem)
View(chem)
#for fun, creates crustacean chart
chart<-nutrients[,c("Fe", "year")]
chart <- na.omit(chart)
#Sort for every lake
chart_mean<-chart%>%group_by(year)%>%
summarise(Fe=mean(Fe))
View(chart_mean)
View(chem)
View(chem)
crustacean <- adk_data("crustacean")
info <- adk_data("meta")
chem <- adk_data("chem")
nutrients <- adk_data("nutrient")
#for fun, creates crustacean chart
chart<-chem[,c("Calcium", "year")]
chart <- na.omit(chart)
#Sort for every lake
chart_mean<-chart%>%group_by(year)%>%
summarise(Calcium=mean(Calcium))
ggplot(data = chart_mean, aes(x=Year,y=round)) + geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "blue", linetype = "dashed")+
theme_classic() +
ylab("Crustacean Density (mg ww /L)") +
xlab("Year") + ggtitle("Rotifer Population Density (mg/L) from 1994 - 2012") +
stat_regline_equation(label.x=2006, label.y=0.05) +
stat_cor(aes(label=..rr.label..), label.x=2006, label.y=0.04)
#for fun, creates crustacean chart
chart<-chem[,c("Calcium", "year", "lake.name")]
View(chart)
#Sort for every lake
chart_mean<-chart%>%group_by(year, lake.name)%>%
summarise(Calcium=mean(Calcium))
View(chart_mean)
#Sort for every lake
chart_mean<-chart%>%group_by(year)%>%
summarise(Calcium=mean(Calcium))
View(chart_mean)
#Sort for every lake
chart_mean<-chart%>%group_by(year, lake.name)%>%
summarise(Calcium=mean(Calcium))
View(chart_mean)
View(chem)
library(readr)
dataset <- read_csv(NULL)
library(readr)
epi_results_2024_pop_gdp <- read_csv("C:\\Users\\matec\\DataAnalytics\\Lab1\\epi_results_2024_pop_gdp.csv")
View(epi_results_2024_pop_gdp)
library(readr)
# set working directory (relative path)
setwd("C:\Users\matec\DataAnalytics")
# set working directory (relative path)
setwd("C:\Users\matec\DataAnalytics")
# view dataframe
View(epi.data)
# read data
epi.data <- read_csv("epi_results_2024_pop_gdp.csv")
# view dataframe
View(epi.data)
library(readr)
# set working directory (relative path)
setwd("C:\Users\matec\DataAnalytics")
# set working directory (relative path)
setwd("C:/Users/matec/DataAnalytics")
# read data
epi.data <- read_csv("epi_results_2024_pop_gdp.csv")
# set working directory (relative path)
setwd("C:/Users/matec/DataAnalytics/Lab1")
# read data
epi.data <- read_csv("epi_results_2024_pop_gdp.csv")
# view dataframe
View(epi.data)
# print summary of variables in dataframe
summary(epi.data$EPI.new)
# print values in variable
epi.data$EPI.new
# attach dataframe
attach(epi.data)
# print values in variable
EPI.new
EPI <- epi.data$EPI.new
# find NAs in variable - outputs vector of logical values, true if NA, false otherwise
NAs <- is.na(EPI)
# print NAs
MHP[which(NAs)]
EPI[which(NAs)]
# print values in variable
MHP <- epi.data$MHP.new
MHP
# find NAs inv variavle - outputs vector of logical values, true if NA, false otherwise
NAs <- is.na(MHP)
# print NAs
MHP[which(NAs)]
# find NAs inv variavle - outputs vector of logical values, true if NA, false otherwise
NAs <- is.na(MHP)
# print NAs
MHP[which(NAs)]
# take subset of NOT NAs from variable
MHP.noNA <- MHP[!NAs]
MHP.noNA
# print NAs
MHP[which(NAs)]
# filter for only values above 30
MHP.above30 <- MHP.noNA[MHP.noNA>30 | MHP.noNA < 20]
# filter for only values above 30
MHP.above30 <- MHP.noNA[MHP.noNA>30 & MHP.noNA < 20]
MHP.above30
# stats
summary(MHP.above30)
# boxplot of variable(s)
boxplot(EPI, MHP.above30, names = c("EPI","MHP"))
# filter for only values above 30
MHP.above30 <- MHP.noNA[MHP.noNA>30]
MHP.above30
# stats
summary(MHP.above30)
# boxplot of variable(s)
boxplot(EPI, MHP.above30, names = c("EPI","MHP"))
# histogram (frequency distribution)
hist(EPI)
# define sequence of values over which to plot histogram
x <- seq(20., 80., 10)
# histogram (frequency distribution) over range
hist(EPI, x, prob=TRUE)
# print estimated density curve for variable
lines(density(EPI,na.rm=TRUE,bw=1.)) # or try bw=“SJ”
# print rug
rug(EPI)
# histogram (frequency distribution) over range
hist(EPI, x, prob=TRUE)
x <- seq(20., 80., 5)
# histogram (frequency distribution) over rabge
hist(EPI, x, prob=TRUE)
x <- seq(20., 80., 5)
# histogram (frequency distribution) over range
hist(EPI, x, prob=TRUE)
# define sequence of values over which to plot histogram
x <- seq(20., 80., 10)
# histogram (frequency distribution) over range
hist(EPI, x, prob=TRUE)
# print estimated density curve for variable
lines(density(EPI,na.rm=TRUE,bw=1.)) # or try bw=“SJ”
# print estimated density curve for variable
lines(density(EPI,na.rm=TRUE, bw="SJ"))
# histogram (frequency distribution) over range
hist(EPI, x, prob=TRUE)
x <- seq(20., 80., 5)
# histogram (frequency distribution) over rabge
hist(EPI, x, prob=TRUE)
# print estimated density curve for variable
lines(density(EPI,na.rm=TRUE, bw="SJ"))
# print rug
rug(EPI)
# histogram (frequency distribution) over rabge
hist(EPI.new, x, prob=TRUE)
# range
x1<-seq(20,80,1)
# generate probability density values for a normal distribution with given mean and sd
d1 <- dnorm(x1,mean=45, sd=11,log=FALSE)
# print density values
lines(x1,d1)
# histogram (frequency distribution) over rabge
hist(EPI, x, prob=TRUE)
# range
x1<-seq(20,80,1)
# generate probability density values for a normal distribution with given mean and sd
d1 <- dnorm(x1,mean=45, sd=11,log=FALSE)
# print density values
lines(x1,d1)
# generate probability density values for a normal distribution with given mean and sd
d1 <- dnorm(x1,mean=45, sd=11,log=FALSE)
# print density values
lines(x1,d1)
# generate probability density values for a normal distribution with given mean and sd
d2 <- dnorm(x1,mean=64, sd=11,log=FALSE)
# print density values
lines(x1,d2)
# print density values
lines(x1,.5*d2)
# plot ecdfs
plot(ecdf(EPI), do.points=FALSE, verticals=TRUE)
plot(ecdf(MHP), do.points=FALSE, verticals=TRUE)
# print quantile-quantile plot for variable with theoretical normal distribuion
qqnorm(EPI); qqline(EPI)
# print quantile-quantile plot for random numbers from a normal distribution with theoretical normal distribution
x <- rnorm(500)
qqnorm(x); qqline(x)
# print quantile-quantile plot for variable with theoretical normal distribuion
qqnorm(EPI); qqline(EPI)
# print quantile-quantile plot for variable with any theoretical distribution
qqplot(rnorm(180), EPI.new.sub, xlab = "Q-Q plot for norm dsn")
# print quantile-quantile plot for variable with any theoretical distribution
qqplot(rnorm(180), EPI.new, xlab = "Q-Q plot for norm dsn")
qqline(EPI.new)
# print quantile-quantile plot for 2 variables
qqplot(EPI, MHP, xlab = "Q-Q plot for EPI vs MHP")
qqplot(x, EPI, xlab = "Q-Q plot for EPI vs MHP")
qqplot(MHP, EPI, xlab = "Q-Q plot for EPI vs MHP")
# print quantile-quantile plot for 2 variables
qqplot(EPI, MHP, xlab = "Q-Q plot for EPI vs MHP")
qqplot(MHP, EPI, xlab = "Q-Q plot for EPI vs MHP")
qqline(EPI)
# print quantile-quantile plot for 2 variables
qqplot(EPI, MHP, xlab = "Q-Q plot for EPI vs MHP")
qqline(MHP)
qqline(MHP)
# plot ecdfs
plot(ecdf(EPI), do.points=FALSE, verticals=TRUE)
plot(ecdf(MHP), do.points=FALSE, verticals=TRUE)
# print quantile-quantile plot for variable with theoretical normal distribuion
qqnorm(EPI); qqline(EPI)
# print quantile-quantile plot for random numbers from a normal distribution with theoretical normal distribution
x <- rnorm(500)
qqnorm(x); qqline(x)
# print quantile-quantile plot for random numbers from a normal distribution with theoretical normal distribution
x <- rnorm(180)
qqnorm(x); qqline(x)
# print quantile-quantile plot for random numbers from a normal distribution with theoretical normal distribution
x <- rnorm(500)
qqnorm(x); qqline(x)
# print quantile-quantile plot for variable with any theoretical distribution
qqplot(rnorm(180), EPI.new, xlab = "Q-Q plot for norm dsn")
qqline(EPI.new)
# print quantile-quantile plot for variable with any theoretical distribution
qqplot(rnorm(180), EPI, xlab = "Q-Q plot for norm dsn")
qqline(EPI)
# print quantile-quantile plot for 2 variables
qqplot(EPI, MHP, xlab = "Q-Q plot for EPI vs MHP")
qqline(MHP)
# print quantile-quantile plot for 2 variables
qqplot(EPI, MHP, xlab = "Q-Q plot for EPI vs MHP")
qqline(MHP)
qqplot(MHP, EPI, xlab = "Q-Q plot for EPI vs MHP")
qqline(EPI)
y <- rnorm(500)
qqplot(x, y, xlab = "Q-Q plot for EPI vs MHP")
qqline(y)
x <- rnorm(500)
y <- rnorm(500)
hist(x)
hist(y)
shapiro.test(x)
shapiro.test(y)
ad.test(x)
epi.data$PAR.new
epi.data$SHI.new
epi.data$PAR.new
NAs <- is.na(epi.data$PAR.new)
PAR <- epi.data$PAR.new(!NAs)
PAR <- epi.data$PAR.new[!NAs]
epi.data$SHI.new
NAs <- is.na(epi.data$SHI.new)
SHI <- epi.data$SHI.new[!NAs]
summary(PAR)
summary(PAR)
summary(SHI)
hist(PAR)
hist(SHI)
hist(PAR)
hist(SHI)
hist(PAR)
hist(SHI)
box(PAR)
box(SHI)
boxplot(PAR, SHI, names = c("PAR","SHI"))
hist(PAR)
hist(SHI)
lines(density(PAR,na.rm=TRUE, bw="SJ"))
# Histograms w/ lines
hist(PAR)
lines(density(PAR,na.rm=TRUE, bw="SJ"))
# Histograms w/ lines
hist(PAR)
lines(density(PAR,na.rm=TRUE, bw="SJ"))
# Histograms w/ lines
hist(EPI, x, prob=TRUE)
# Histograms w/ lines
x <- seq(20., 80., 5)
hist(EPI, x, prob=TRUE)
lines(density(PAR,na.rm=TRUE, bw="SJ"))
# Histograms w/ lines
x <- seq(20., 80., 5)
hist(PAR, x, prob=TRUE)
# Histograms w/ lines
x <- seq(20., 80., 5)
# Histograms w/ lines
x <- seq(20., 100., 5)
hist(PAR, x, prob=TRUE)
lines(density(PAR,na.rm=TRUE, bw="SJ"))
# Histograms w/ lines
x <- seq(0., 100., 5)
hist(PAR, x, prob=TRUE)
lines(density(PAR,na.rm=TRUE, bw="SJ"))
hist(SHI)
hist(SHI, x, prob=TRUE)
lines(density(SHI,na.rm=TRUE, bw="SJ"))
#ECDF
plot(ecdf(PAR), do.points=FALSE, verticals=TRUE)
plot(ecdf(SHI), do.points=FALSE, verticals=TRUE)
# QQ against normal distrib
qqnorm(PAR); qqline(PAR)
qqnorm(SHI); qqline(SHI)
# QQ against normal distrib
qqnorm(PAR); qqline(PAR)
# QQ against each other
qqplot(PAR, SHI, xlab = "Q-Q plot for PAR vs SHI")
qqline(SHI)
qqline(PAR)
qqline(PAR)
# QQ against each other
qqplot(PAR, SHI, xlab = "Q-Q plot for PAR vs SHI")
# QQ against each other
qqplot(SHI, PAR, xlab = "Q-Q plot for PAR vs SHI")
qqline(PAR)
qqline(SHI)
# QQ against each other
qqplot(PAR, SHI, xlab = "Q-Q plot for PAR vs SHI")
qqline(SHI)
hist(PAR)
hist(PAR)
hist(SHI)
# Normality tests
shapiro.test(PAR)
shapiro.test(SHI)
# Statistical test for variables having same distribution
ks.test(PAR, SHI)
# Statistical test for variables having same distribution
ks.test(PAR, SHI)
# Statistical test for variables having same distribution
ks.test(PAR, SHI)
wilcox.test(PAR,SHI)
var.test(PAR,SHI)
t.test(PAR,SHI)
# Statistical test for variables having same distribution
ks.test(PAR, SHI)
wilcox.test(PAR,SHI)
var.test(PAR,SHI)
epi.data$PAR.new
NAs <- is.na(epi.data$PAR.new)
PAR <- epi.data$PAR.new[!NAs]
epi.data$SHI.new
NAs <- is.na(epi.data$SHI.new)
SHI <- epi.data$SHI.new[!NAs]
# Variable summaries
summary(PAR)
summary(SHI)
# Boxplots
boxplot(PAR, SHI, names = c("PAR","SHI"))
# Histograms w/ lines
x <- seq(0., 100., 5)
hist(PAR, x, prob=TRUE)
lines(density(PAR,na.rm=TRUE, bw="SJ"))
x <- seq(0., 100., 5)
hist(SHI, x, prob=TRUE)
lines(density(SHI,na.rm=TRUE, bw="SJ"))
#ECDF
plot(ecdf(PAR), do.points=FALSE, verticals=TRUE)
plot(ecdf(SHI), do.points=FALSE, verticals=TRUE)
#ECDF
plot(ecdf(PAR), do.points=FALSE, verticals=TRUE)
plot(ecdf(SHI), do.points=FALSE, verticals=TRUE)
# QQ against normal distrib
qqnorm(PAR); qqline(PAR)
qqnorm(SHI); qqline(SHI)
# QQ against each other
qqplot(PAR, SHI, xlab = "Q-Q plot for PAR vs SHI")
qqline(SHI)
# Normality tests
shapiro.test(PAR)
shapiro.test(SHI)
# Statistical test for variables having same distribution
ks.test(PAR, SHI)
wilcox.test(PAR,SHI)
# Variance tests
var.test(PAR,SHI)
t.test(PAR,SHI)
